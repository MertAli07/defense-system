//package assignment2;

import java.io.IOException;
import java.util.Map;
import java.io.File;
import java.io.FileWriter;
import java.util.Scanner;
import java.util.ArrayList;
import java.util.LinkedHashMap;

/**
 * This class accomplishes Mission Firewall
 */
public class MalwareScanner {

    private final Map<String, Malware> malwareDB;

    public MalwareScanner(Map<String, Malware> malwareDB) {
        this.malwareDB = malwareDB;
    }

    /**
     * TODO: Open and read the input file while searching for threats
     * TODO: Write results to both; a new file name "scanLog.txt" and to the console
     *
     * @param filename the input file
     * @throws IOException the io exception
     */
    public void scanFile(String filename) throws IOException {
        // TODO: YOUR CODE HERE
    	ArrayList<String> data = new ArrayList<String>();
    	LinkedHashMap<String, Integer> res = new LinkedHashMap<String, Integer>();
    	Scanner sc = new Scanner(new File(filename));
    	while(sc.hasNextLine())
    	{
    		String line = sc.nextLine();
    		data.add(line);
    	}
    	sc.close();
    	for(int line = 0; line < data.size(); line++)
    	{
    		String item = turbo64(data.get(line));
    		if(malwareDB.keySet().contains(item))
    		{
    			res.put(item, ++line);
    		}
    	}
    	
    	
    	//Write to scanLog.txt
    	FileWriter pen = new FileWriter("scanLog.txt");
    	for(String hash : res.keySet())
    	{
    		pen.write(hash + "@" + res.get(hash) + "\n");
    	}
    	pen.close();
    	//Console output
    	System.out.println("Started scanning...");
    	for(String hash : res.keySet())
    	{
    		Util.printlnDash();
    		System.out.println("Detected malware!");
    		System.out.println(malwareDB.get(hash));
    	}
    	Util.printlnDash();
    	System.out.println("Scan complete! "+res.size()+" threats are found and eliminated. Generating log file...");
    	
    }

    public static String turbo64(String in) {
        // Implement turbo64 algorithm given by the assignment instructions
        // TODO: YOUR CODE HERE
    	long modTurbo = 4294967291L;
    	long a = 0L;
    	long b = 1L;
    	for(int i = 0; i<in.length(); i++)
    	{
    		a = (a + (int) in.charAt(i)) % modTurbo;
    		b = (a + b) % modTurbo;
    	}
    	
        return Long.toHexString((b << 32) | a);
    }
}

